@name Nolphin V4 Engine
@inputs W A S D Up Down OnOff ForceOff ForceOn X Y Z 
@inputs Prop:entity Prop2:entity Prop3:entity Prop4:entity Prop5:entity
@outputs ID On 
@outputs
@persist Roll Yaw Pitch P2 R2 Engines ForceOn PropB:entity
@persist ZThrust DiffZ InternalZ ZForce AddedZ Z2 For2
@persist YForce YAdjust LocalX LocalY I
#Nebcorp automatic hovering gyrations and maneuverabilities calculation and excecution chip
##Version 4.0##
#Most recent time I adjusted the date: 
##Feb 8th, 11:30##

###<< Configuration >>

#Yaw (turning) Mode:
#1: "Friction based", for more realistic turning (if you are spun, the ship stabalizes at current Yaw)
#2: "Fixed Yaw", ideal for more controlled turning (if you are spun, the ship returns to your desired Yaw)
YawMode = 1

RollLeaning = 1  #0 disables (Left/right leaning)
PitchLeaning = 1  #0 disables (Forward/backward leaning)
SmartZ = 1 #0 behaves like hoverballs, snapping back to set Z. 1 resets targetZ if its too distant (recommended)
 
RSpeed = 1.5  #0.2 - 10, The primary speed control multiplier for forward/back motions. Default 1
TSpeed = 1  #0.2 - 4, The turning speed control multiplier. Default 1
ZAcceleration = 1  #0.2 - 4, The speed of acceleration for going up/down. Default 1
ZTopSpeed = 1  #0.2 - 3, The top speed going up/down. Default 1
 
Friction = 3  #1 - 60, higher reduces effect. Controls how quickly the ship comes to a stop. Default 5

RangerMode = 1 #Uses whatever entity the chip is sitting on, rather than the inputted.
StayOn = 1 #Forces it on without needing an input; for debuggin.

#Troubleshooting:
RadiusModifier = 2 #0.2 - 2. Normally, higher is more accurate. If stability is compromised OR for thin ships, lower this. 
YawInvert = 0 #0 off, 1 on. If the ship keeps irrationally spinning, try switching this.
Orientation = "forward" #Often throwing "right" in here fixes problems, as some props, like SBMP, do not face forwards. 

#Things you probably should never ever modify upon pain of death
RagdollMode = 0 #KEEP OFF

###<< End of Configuration >>
 
#NOTES ON INPUTS:
#Prop:entity is wired to a source of entitydata about your ship, such as an Entity Marker
#WASD/Up/Down: Does not need to be from an APC. Only send values of 1 or 0 for each. 
#OnOff toggles the internal engine; Force simply sets the engine.
#Z overrides the height controls and simply hovers at the inputted height.
#To use XYZ-tracking mode, wire up your desired location to the XYZ inputs, and the Nolphin will swiftly fly there.
 
 
 
 
 
 
#Declares common variables
On = Engines
if(On) {interval(20)} else{interval(1000)} #Slows down excecution when off
if(RangerMode) {R = ranger(-25):entity(), if(R != entity() & R) {PropB = R}, Prop = PropB}
ID = Prop:id()
Pitch = Prop:angles():pitch()
Yaw = Prop:angles():yaw()
Roll = Prop:angles():roll()
TarR=(($Roll)*8+Roll) + (R2 *0.45 *RollLeaning)
TarP=(($Pitch)*8+Pitch) - (P2 *PitchLeaning)
GPSMode = (X & Y & Z) #When to activate GPSMode
 
#Power settings
if(~OnOff & OnOff) {Engines = !Engines}
if(ForceOff) {Engines = 0} 
if(ForceOn) {Engines = 1} elseif(~ForceOn & !ForceOn) {Engines = 0}
if(StayOn) {Engines = 1}

#Orientation Fun
if(Orientation == "right") {PForward = Prop:right(), PRight = -Prop:forward(), I = -1}
elseif(Orientation == "left") {PForward = -Prop:right(), PRight = Prop:forward()}      
else{PForward = Prop:forward(), PRight = Prop:right(), I = 1}
if(I == -1) {WI = W, SI = S, AI = A, DI = D
W = SI, S = WI, A = DI, D = AI}

#Forward Thrust, smoothened
For1 = (W-S) *100
if(For2 > For1) {if(For1 == 0 | (For1 == -100 & (For2 > 0))) {For2 -= 2.1} else{For2 -= 0.70}}
elseif(For1 > For2) {if(For1 == 0 | (For1 == 100 & (For2 < 0))) {For2 += 2.1} else{For2 += 0.70}}
if(For2 < 1 & For2 > 0) {Forward = 0} else{Forward = For2 / 333}

#Additional Z to add, smoothened
Z3 = ZTopSpeed *100
Z1=(Up-Down)* Z3
if(Z2 > Z1) {if(Z1 == 0 | (Z1 == -Z3 & (Z2 > 0))) {Z2 -= 0.84 * ZAcceleration} else{Z2 -= 0.28 * ZAcceleration}}
elseif(Z1 > Z2) {if(Z1 == 0 | (Z1 == Z3 & (Z2 < 0))) {Z2 += 0.84 * ZAcceleration} else{Z2 += 0.28 * ZAcceleration}}
if(Z2 < 1 & Z2 > 0) {ZForce = 0} else{ZForce = Z2 / 5}
AddedZ += ZForce

#Additional Pitch, smoothened
if(ZForce > 15) {P2 = 45*I} elseif(ZForce < -15) {P2 = -45*I} else{P2 = ZForce*I * 3}

#Additional Roll, smoothened
R1 = (D - A) * 100
if((R2 < R1) & (R2 > R1 + 1)) {R2 = 0} #Filters out petty decimals like 0.31
elseif(R2 > R1) {if(R1==0 | (R1 == -100 & (R2 > 0))) {R2 -= 0.9} else{R2 -= 0.3}} 
elseif(R1 > R2) {if(R1==0 | (R1 == 100 & (R2 < 0))) {R2 += 0.9} else{R2 += 0.3}}

#Z Control
if(InternalZ == 0) {InternalZ = Prop:pos():z() + 35}
if(Z != 0) { #If we're recieving a target Z to go to, go.
DiffZ = Z - Prop:pos():z()
ZThrust = -(DiffZ + $DiffZ * 15)  
} else { #Otherwise, default to current position.
DiffZ = InternalZ - Prop:pos():z() + AddedZ
if(SmartZ)   { #Config switch
if(DiffZ > 28) {AddedZ -= (DiffZ - 28)} #Resets if we're waaay below target.
elseif(DiffZ < -28) {AddedZ -= (DiffZ + 28)}   } #Resets if we're waaay above target.
ZThrust = -(DiffZ + $DiffZ * 5)}

#XY OR Friction, Rear/Right Maneouverability Thrusters
if(GPSMode == 0) { #Friction mode
XFriction = Prop:velL():x() / Friction
if(XFriction < 0 & !W) {XSlow = XFriction} elseif(XFriction > 0 & !S) {XSlow = XFriction} else{XSlow = 0} 
Rear = 40 * Forward * RSpeed + XSlow #- RearZThrust
Right = (Prop:velL():y() / Friction)# + RightZThrust2  
}
elseif(GPSMode == 1) { #XY tracking Mode
SubtractedV = vec(X - Prop:pos():x(), Y - Prop:pos():y(), Z - Prop:pos():z())
LocalX = SubtractedV:dot(Prop:forward())
LocalY = SubtractedV:dot(Prop:right())
Rear =  (  (-($LocalX*4 + LocalX) / 7.5) + (Prop:velL():x() / Friction)  ) / 2
Right = (  (($LocalY*4 + LocalY) / 7.5) + (Prop:velL():y() /Friction)  ) /2  
}

#Yaw, FLSide thruster
if(YawMode == 1) { #Friction based
FLSide = (D - A)*I * (1 + For2 / 60) + ((!A & !D) * Prop:angVel():yaw() / Friction) }
elseif(YawMode == 2) { #Forced Yaw based
if(!Engines) {YForce = -Yaw}
YForce += (D - A)*I * 1.4 * TSpeed
if(YForce < -179) {YForce = 179}
if(YForce > 179) {YForce = -179}
YAdjust = angnorm(Yaw + YForce)
FLSide = (($YAdjust) * 10 + YAdjust) *TSpeed}
else{FLSide = (D - A) * TSpeed} #Default to basic

#Turns it off + resets
if(!Engines) {AddedZ = 0, InternalZ = Prop:pos():z()+35, Z2 = 0, For2 = 0
North = 0, East = 0, South = 0, West = 0, Rear = 0, Right = 0, FLSide = 0, ZThrust = 0}


#Internal Thruster Variables
Weight = Prop:mass() * 0.8
Radius = Prop:radius() * RadiusModifier
CMass = Prop:massCenterL()
UpZ = Prop:up():z() + 0.1
if(RagdollMode) {Radius = 100, Weight = 100} #Lawl
if(YawInvert) {YI = -1} else{YI = 1} #Negates the yaw thruster, see config

#Applies the actual thrust
if(Engines) {
Prop:applyForce(vec(0,0,-ZThrust) * Weight*4) #Primary Z

Prop:applyOffsetForce(vec(0,0,TarP) * Weight/2, Prop:toWorld(vec(Radius,0,0)) *UpZ + CMass) #North
Prop:applyOffsetForce(vec(0,0,-TarP) * Weight/2, Prop:toWorld(vec(-Radius,0,0)) *UpZ + CMass) #South
Prop:applyOffsetForce(vec(0,0,TarR) * Weight/2, Prop:toWorld(vec(0,-Radius,0)) *UpZ + CMass) #West
Prop:applyOffsetForce(vec(0,0,-TarR) * Weight/2, Prop:toWorld(vec(0,Radius,0)) *UpZ + CMass) #East

Prop:applyForce(PForward * -Rear * Weight/2) #Rear, handles movement and friction
Prop:applyForce(PRight * Right * Weight/2) #Right, handles friction

Prop:applyOffsetForce(PRight *vec(FLSide,FLSide,0) *YI *Weight/4, Prop:toWorld(vec(Radius,-Radius,0)) + CMass) #Yaw thruster

#Extra Props for thrust
if(Prop2) {
Weight2 = Prop2:mass() * 0.8
Radius2 = Prop2:radius() * RadiusModifier   
CMass2 = Prop2:massCenterL()
Prop2:applyForce(vec(0,0,-ZThrust) * Weight2*4) #Primary Z
Prop2:applyOffsetForce(vec(0,0,TarP) * Weight2/2, Prop2:toWorld(vec(Radius2,0,0)) *UpZ + CMass2) #North
Prop2:applyOffsetForce(vec(0,0,-TarP) * Weight2/2, Prop2:toWorld(vec(-Radius2,0,0)) *UpZ + CMass2) #South
Prop2:applyOffsetForce(vec(0,0,TarR) * Weight2/2, Prop2:toWorld(vec(0,-Radius2,0)) *UpZ + CMass2) #West
Prop2:applyOffsetForce(vec(0,0,-TarR) * Weight2/2, Prop2:toWorld(vec(0,Radius2,0)) *UpZ + CMass2) #East
Prop2:applyForce(Prop2:forward() * -Rear * Weight2/2) #Rear, handles movement and friction
Prop2:applyForce(Prop2:right() * Right * Weight2/2) #Right, handles friction
Prop2:applyOffsetForce(Prop2:right() *vec(FLSide,FLSide,0) *YI *Weight2/4, Prop2:toWorld(vec(Radius2,-Radius2,0)) + CMass2) #Yaw thruster
}
if(Prop3) {
Weight3 = Prop3:mass() * 0.8
Radius3 = Prop3:radius() * RadiusModifier
CMass3 = Prop3:massCenterL()
Prop3:applyForce(vec(0,0,-ZThrust) * Weight3*4) #Primary Z
Prop3:applyOffsetForce(vec(0,0,TarP) * Weight3/2, Prop3:toWorld(vec(Radius3,0,0)) *UpZ + CMass3) #North
Prop3:applyOffsetForce(vec(0,0,-TarP) * Weight3/2, Prop3:toWorld(vec(-Radius3,0,0)) *UpZ + CMass3) #South
Prop3:applyOffsetForce(vec(0,0,TarR) * Weight3/2, Prop3:toWorld(vec(0,-Radius3,0)) *UpZ + CMass3) #West
Prop3:applyOffsetForce(vec(0,0,-TarR) * Weight3/2, Prop3:toWorld(vec(0,Radius3,0)) *UpZ + CMass3) #East
Prop3:applyForce(Prop3:forward() * -Rear * Weight3/2) #Rear, handles movement and friction
Prop3:applyForce(Prop3:right() * Right * Weight3/2) #Right, handles friction
Prop3:applyOffsetForce(Prop3:right() *vec(FLSide,FLSide,0) *YI *Weight3/4, Prop3:toWorld(vec(Radius3,-Radius3,0)) + CMass3) #Yaw thruster
}
if(Prop4) {
Weight4 = Prop4:mass() * 0.8
Radius4 = Prop4:radius() * RadiusModifier
CMass4 = Prop4:massCenterL()
Prop4:applyForce(vec(0,0,-ZThrust) * Weight4*4) #Primary Z
Prop4:applyOffsetForce(vec(0,0,TarP) * Weight4/2, Prop4:toWorld(vec(Radius4,0,0)) *UpZ + CMass4) #North
Prop4:applyOffsetForce(vec(0,0,-TarP) * Weight4/2, Prop4:toWorld(vec(-Radius4,0,0)) *UpZ + CMass4) #South
Prop4:applyOffsetForce(vec(0,0,TarR) * Weight4/2, Prop4:toWorld(vec(0,-Radius4,0)) *UpZ + CMass4) #West
Prop4:applyOffsetForce(vec(0,0,-TarR) * Weight4/2, Prop4:toWorld(vec(0,Radius4,0)) *UpZ + CMass4) #East
Prop4:applyForce(Prop4:forward() * -Rear * Weight4/2) #Rear, handles movement and friction
Prop4:applyForce(Prop4:right() * Right * Weight4/2) #Right, handles friction
Prop4:applyOffsetForce(Prop4:right() *vec(FLSide,FLSide,0) *YI *Weight4/4, Prop4:toWorld(vec(Radius4,-Radius4,0)) + CMass4) #Yaw thruster
}
if(Prop5) {
Weight5 = Prop5:mass() * 0.8
Radius5 = Prop5:radius() * RadiusModifier
CMass5 = Prop5:massCenterL()
Prop5:applyForce(vec(0,0,-ZThrust) * Weight5*4) #Primary Z
Prop5:applyOffsetForce(vec(0,0,TarP) * Weight5/2, Prop5:toWorld(vec(Radius5,0,0)) *UpZ + CMass5) #North
Prop5:applyOffsetForce(vec(0,0,-TarP) * Weight5/2, Prop5:toWorld(vec(-Radius5,0,0)) *UpZ + CMass5) #South
Prop5:applyOffsetForce(vec(0,0,TarR) * Weight5/2, Prop5:toWorld(vec(0,-Radius5,0)) *UpZ + CMass5) #West
Prop5:applyOffsetForce(vec(0,0,-TarR) * Weight5/2, Prop5:toWorld(vec(0,Radius5,0)) *UpZ + CMass5) #East
Prop5:applyForce(Prop5:forward() * -Rear * Weight5/2) #Rear, handles movement and friction
Prop5:applyForce(Prop5:right() * Right * Weight5/2) #Right, handles friction
Prop5:applyOffsetForce(Prop5:right() *vec(FLSide,FLSide,0) *YI *Weight5/4, Prop5:toWorld(vec(Radius5,-Radius5,0)) + CMass5) #Yaw thruster
}
}
