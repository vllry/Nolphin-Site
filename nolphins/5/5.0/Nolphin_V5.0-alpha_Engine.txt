@name Nolphin V5.0-alpha Engine
@inputs ChairIn:entity PropIn:entity Destination:vector OnOff X Y Z SongPitch NextSong EnginesIn Gravity
@outputs Engines Speed TarY YThrottle YTime
@outputs Rear Right FrontLeftSide RollThrust PitchThrust Bottom
@persist Roll Yaw Pitch Engines [Prop Chair]:entity
@persist ZThrust ZDiff InternalZ ZThrottle ZAdded RThrottle YThrottle Throttle TopSpeed2
@persist YForce YAdjust LocalX LocalY NotSolid FreeV:vector TotalMass
@persist Ownerpos:vector NautomatonPause Tick ChairSpawned Owner:entity Instructions:array AlphaList:array PList:array PHXProp:entity
@persist Time Song SongEndTime JukeboxOn SongDurations:array SongList:array Role:string
@persist TurnMode TurnSpeed Friction AngFriction TopSpeed RAcceleration ZTopSpeed ZAcceleration TurnAccel OrientationAbs OrientationSign
@persist XYZDistance Nautomaton ZOffset RollLeaning PitchLeaning RollRevertSpd SmartZ Freecam Gravity TrainGrav Version:string
@persist AlwaysOn AutoDetect AdvButtons Jukebox AutoChair RadiusModifier Orientation FreeSpeed InternalCombustion YTime

if(first()) {       #Nebcorp Oscillating Levitations Processor and Highly Intellegent Nolphin
                    Version = "5.0alpha" # Jan 20th 2016

#Settingname = Value #Range [Default Value], Description.

#1: "Fixed-Speed": GENERAL-Turn speed is based on forward thrust; scales well on most ships, feels most 'natural'. Recommended.
#2: "Forced-Yaw" : LARGESHIPS-Ship isn't spun due to external forces; always faces the last direction set. Better for huge ships, or for increased stability.
TurnMode        = 4 # 1 or 2   [1]
    TurnSpeed   = 1.6 # 0.2 to 4 [1], for personal preference.
	   TurnAccel   = 3 # 0.2 to 4 [1]
Friction        = 1 # 0 to 5 [1], higher values make the ship come to a stop faster
    AngFriction = 1 # 0 to 5 [1], lower values reduce angular stabilizer power (Lower/disable in ground-based vehicles like cars)
RadiusModifier  = 1.5 # 0.2 to 2 [1], higher values increase stability, but too high causes ridiculously crazy convulsions.

#Gravity
#  > 1: Extra upwards pressure (gliders, planes)
#    1: Disable Z (normal gravity)
#--> 0: Hovercraft
#  < 0: Extra downwards pressure (trains, tanks)
Gravity         = 1 # -10 to 25 [0]
    TrainGrav   = 0 # [0] Enabling makes the gravity push 'down relative to the nolphin' rather than relative to world
Orientation     = -1 # Which direction is "forward". 1:normal, -1:reversed, 2:facing right, -2:facing left

#TopSpeed
#1 - 270,    holding W increases the current speed, over 2 seconds, to TopSpeed (measured in KM/H).                More like racing games.
#0,          tapping W increases the current speed, by 2km/h per tap, and the Nolphin 'autopilots' at this speed.  More like Autopilot.
#-1 to -270,  pressing W applies bursts of speed, speed will very gradually decrease otherwise.                    More like a real car.
TopSpeed  =  55, RAcceleration = 1  # ^^^    [60] [1], Acceleration affects how quickly you reach top speed. Higher is sooner.
ZTopSpeed =  40, ZAcceleration = 1  #1 to 60 [40] [1], Vertical top speed, measured in KM/H, and the vertical acceleration multiplier.

PitchLeaning = 0 # 0 to 1.75 [1]  P: For going up/down
RollLeaning  = 0 # 0 to 1.75 [1]  R: For turning           Value indicates how far (45*Val) to lean.
    RollRevertSpd = 4 # 1 - 5    [3], how quickly the ship recovers from intentional (turning/banking) rolls. 
SmartZ       = 25 # [25] 0: hoverball behavior, snapping back to set Z. X>0: Resets targetZ if Nolphin is beyond that distance. 

#Modes
AlwaysOn    = 0 # [0] Forces Nolphin on constantly (for debuggin, utility)
AutoChair   = 0 # [1] Automatically creates a chair, if none is found. 2 for Microchair
Jukebox     = 1 # [1] Enables Music (press Shift-Alt)
AdvButtons  = 1 # [1] Enables Alt & Shift, used in Radio, Freezing, Ghosting, Freecam
InternalCombustion = 1 # [1] Leave 0 if you want to wire up your own thrusters

#Advanced Settings
XYZDistance = 100 # [100] Distance away from XYZ targets to stop at, in Garries.
Nautomaton  = 0, ZOffset = 40 # [0] Makes the Nolphin follow you around like a pet :D   [40] How high off the ground should the Nautomaton be.
Freecam      = 1  # [0] Causes pressing Shift to enter Freecam mode, where the Nolphin flies towards your view.
   FreeSpeed = 15 # 5 - 50 [15], how fast to move in FreeSpeed.
HaxBoard    = 2 # [2] lolololololol


    ###<< End of Configuration >>     
 
#Prop:entity is wired to a source of entitydata about your ship, such as an Entity Marker
#To use XYZ-tracking mode, wire up your desired location to the XYZ inputs, and the Nolphin will swiftly fly there.


#if(first()) Stuff
timer("Rediscover Engines", 50)
Owner = owner()
Weld = entity():isWeldedTo()
#ifdef entity:weld2(entity)
    if(HaxBoard > 2 | (HaxBoard & !PropIn & Weld & Weld:radius() < 45)) { #Thats too small! Make us a PHX
        entity():weldBreakAll()
        PHXProp = propSpawn("models/hunter/plates/plate"+HaxBoard+"x"+HaxBoard+".mdl", Weld:pos(), Weld:angles())
        WeldMass = Weld:mass()
        for(K=1, Weld:hasConstraints("Weld")) {
            #Weld the PHX to everything welded() was
            PHXProp:weld2(Weld:isConstrainedTo("Weld", K))
            WeldMass += Weld:isConstrainedTo("Weld", K):mass()
        }
        PHXProp:setMass(WeldMass *1.3)
        PHXProp:propDraw(0)
        PHXProp:propNotSolid(1)
        PHXProp:weld(entity())
        PHXProp:weld2(Weld)
        Prop = PHXProp
        PHXProp:entTable():setValue("IsFakeNolphin", 1)
    }
    elseif(Weld:entTable()["IsFakeNolphin",number] == 1) {
        PHXProp = Weld
        Prop = Weld
    }
#endif

function setGhostState(State) {
    NotSolid = State
    Chair:hintDriver("We're "+(NotSolid ? "Ghosted!" : "Unghosted!"), 2)
    if(NotSolid) {
        foreach(K,V:entity=PList) {
            V:propNotSolid(1)
            AlphaList[V:id(),number] = V:getAlpha()
            V:setAlpha(V:getAlpha()-100)
        }
    } else{
        foreach(K,V:entity=PList) {
            V:propNotSolid(0)
            V:setAlpha(AlphaList[V:id(),number])
        }
    }
}
function normal easeOutPower(CurrentFrame, Duration, Power) {
    CurrentFrame /= Duration
    if(Power < 1) { #linear
        return CurrentFrame
    } if(Power < 2) { #easeOutQuad
        return -(CurrentFrame * (CurrentFrame-2))
    } elseif(Power < 3) { #easeOutCube
        CurrentFrame -= 1
        return (CurrentFrame^3 + 1)
    } elseif(Power < 4) { #easeOutQuart
        CurrentFrame -= 1
        return -(CurrentFrame^4 - 1)
    } else { #easeOutExpo
        return -(2^(-10 * CurrentFrame)) + 1
    }
}

OrientationSign = sign(Orientation) OrientationAbs = abs(Orientation)
runOnChat(1)
TopSpeed = clamp(TopSpeed, -270, 270) #Shit goes bad at speeds over 260km/h; source limitation
#ifdef fileReadArray(string)
    if(Jukebox)   {
        gShare(1), gSetGroup("Muzak")
        SongList = fileReadArray("jukeboxsongs"), SongDurations = fileReadArray("jukeboxdurations"), Song = 666
    }
#endif
timer("250", 1000)
}

Time = curtime()
if(Destination) {X = Destination:x(), Y = Destination:y(), Z = Destination:z()}

if(OrientationAbs == 2) {PRight = Prop:forward(), PForward = Prop:right(), Speed = toUnit("km/h", Prop:velL():x())}
else                    {PRight = Prop:right(), PForward =-Prop:forward(), Speed = toUnit("km/h",-Prop:velL():y())}
PRight *= OrientationSign, PForward *= OrientationSign, Speed *= OrientationSign

#ifdef spawnTempVehicle(string, vector, angle)
if(ChairSpawned<2 & AutoChair & (first() | clk("Rechair"))) {
    timer("Rechair", 100)
    ChairSpawned++
    if(Prop & (!Chair | AutoChair > 2)) {
        Chair = spawnTempVehicle("models/Nova/jeep_seat.mdl", entity():toWorld(vec(0,0,(AutoChair==2 ?0.5 :2))), PForward:toAngle() + ang(0, 0, 360  - PRight:toAngle():pitch()))
        Chair:weld(array(Prop)), Chair:setNoCollisions(1)
        timer("Rediscover Engines", 50)
    }   
}
#endif

#Establishes Communications
Driver = Chair:driver()
if(changed(Driver)) {
    #Instructions System
    for(K=1, Instructions:count()) {if(Instructions[K, entity] == Driver) {IsPrevDriver = 1, break}}
    if(!IsPrevDriver) {
        Instructions:pushEntity(Driver)
        White = vec(200,200,200), Purple = vec(120,100,200)
        Chair:printColorDriver(White, "    [Welcome to Nolphin version " + Version + "!]")
        Chair:printColorDriver(Purple, "Power", White, ": Mouse2            ", Purple, "Up", White, ": Space                   ", Purple, "Down", White, ": R")
        Chair:printColorDriver(Purple, "Turbo", White, ": Mouse1             ", Purple, "Emergency Fly", White, ": Shift  ", Purple, "Radio", White, ": Alt-Shift")
        Chair:printColorDriver(Purple, "Ghosting", White, ": Alt-Mouse1  ", Purple, "Freezing", White, ": Alt-Mouse2")
        Chair:printColorDriver(White, "[To adjust configs midflight: say (config) (value) ie. 'topspeed 60']")
    }
}

if(Driver:inVehicle()) {
    #Key presses
    WS = Driver:keyForward() - Driver:keyBack()
    AD = Driver:keyLeft() - Driver:keyRight()
    UpDown = Driver:keyJump() - Driver:keyReload()
    if(AdvButtons) {Shift = Driver:keySprint(), Alt = Driver:keyWalk()}
    Mouse1 = Driver:keyAttack1(), Mouse2 = Driver:keyAttack2()
    Mouse1 = 0
    
    #Active Configuration (voice commands)
    if(chatClk(Driver)) {
        LastSaid = (lastSaid():sub(1,1) == "!" ? lastSaid():sub(2) : lastSaid()) # strip leading !
        Said = LastSaid:explode(" ")
        Said1 = Said:string(1):lower(), Said2 = Said:string(2):toNumber(), SaidIt = Said:count() == 2
        if(Said:count() < 3) {
			         #hideChat(1)
            if    (Said1:find("gravity"))     {Gravity       = clamp((SaidIt?Said2 : Gravity),-50, 20),    Chair:hintDriver("Gravity " + (SaidIt?"changed to " : "is ") +  Gravity, 3)}
            elseif(Said1 == "turnmode")       {TurnMode      = clamp((SaidIt?Said2 : TurnMode), 0, 2),     Chair:hintDriver("TurnMode " + (SaidIt?"changed to " : "is ") +   TurnMode, 3), YForce = -Prop:angles():yaw()}
            elseif(Said1 == "turnspeed")      {TurnSpeed     = clamp((SaidIt?Said2 : TurnSpeed), 0, 5),    Chair:hintDriver("TurnSpeed " + (SaidIt?"changed to " : "is ") + TurnSpeed, 3)}
            elseif(Said1 == "topspeed")       {TopSpeed      = clamp((SaidIt?Said2 : TopSpeed),-270,270),  Chair:hintDriver("TopSpeed " + (SaidIt?"changed to " : "is ") +  TopSpeed, 3), TopSpeed2=0}
            elseif(Said1 == "ztopspeed")      {ZTopSpeed     = clamp((SaidIt?Said2 : ZTopSpeed), 0, 270),  Chair:hintDriver("ZTopSpeed " + (SaidIt?"changed to " : "is ") + ZTopSpeed, 3)}
            elseif(Said1 == "friction")       {Friction      = clamp((SaidIt?Said2 : Friction), 0, 10),    Chair:hintDriver("Friction " + (SaidIt?"changed to " : "is ") +  Friction, 3)}
            elseif(Said1 == "angfriction")    {AngFriction   = clamp((SaidIt?Said2 : AngFriction), 0, 10),   Chair:hintDriver("AngFriction " + (SaidIt?"changed to " : "is ") + AngFriction, 3)}
            elseif(Said1 == "leaning")        {RollLeaning   = clamp((SaidIt?Said2 : RollLeaning), 0, 1.75), Chair:hintDriver("Pitch & Roll leaning " + (SaidIt?"changed to " : "is ") + RollLeaning, 3), PitchLeaning = clamp((SaidIt?Said2 : PitchLeaning), 0, 1.75)}
            elseif(Said1 == "rollleaning")    {RollLeaning   = clamp((SaidIt?Said2 : RollLeaning), 0, 1.75), Chair:hintDriver("RollLeaning " + (SaidIt?"changed to " : "is ") +   RollLeaning, 3)}
            elseif(Said1 == "pitchleaning")   {PitchLeaning  = clamp((SaidIt?Said2 : PitchLeaning), 0, 1.75), Chair:hintDriver("PitchLeaning " + (SaidIt?"changed to " : "is ") +  PitchLeaning, 3)}
            elseif(Said1:find("radius"))      {RadiusModifier= clamp((SaidIt?Said2 : RadiusModifier),0.05,3), Chair:hintDriver("RadiusModifier " + (SaidIt?"changed to " : "is ") + RadiusModifier, 3)}
            elseif(Said1:find("orient"))      {Orientation   = clamp((SaidIt?Said2 : Orientation),-2, 2),     Chair:hintDriver("Orientation " + (SaidIt?"changed to " : "is ") +   Orientation, 3) OrientationSign = sign(Orientation) OrientationAbs = abs(Orientation)}
            elseif(Said1:find("free"))        {FreeSpeed     = clamp((SaidIt?Said2 : FreeSpeed), 1, 180),     Chair:hintDriver("FreeSpeed " + (SaidIt?"changed to " : "is ") +     FreeSpeed, 3)}
            elseif(Said1:find("accel"))       {RAcceleration = clamp((SaidIt?Said2 : RAcceleration), 0.1, 4), Chair:hintDriver("Acceleration " + (SaidIt?"changed to " : "is ") + RAcceleration, 3)}
        }
        if(Said1 == "nextsong")    {Song = randint(1,44)}
        elseif(Said1 == "jukebox" | Said1 == "radio") {JukeboxOn = !JukeboxOn,        Chair:hintDriver("Jukebox was turned " + (JukeboxOn ? "on." : "off."), 3)}
    }
    if(changed(Mouse2) & Mouse2) {
        if(!Alt) {
            #Power toggle
            Engines = !Engines
            Chair:hintDriver("Power "+(Engines ? "On!" : "Off!"), 3)
        }
        else {
            #Freezing Module
            UnFreeze = Prop:isFrozen()
            Chair:hintDriver("We're now "+(UnFreeze ? "Unfrozen!" : "Frozen!"), 2)
            foreach(K,V:entity=PList) {
                V:propFreeze(!UnFreeze)
            }
        }   
    }
    #Ghosting module
    if(changed(Mouse1) & Mouse1 & Alt) {
        setGhostState(!NotSolid)
    }
}
else{Driver = noentity()}

#Power settings
if(inputClk()) {
    if(~OnOff & OnOff) {Engines = !Engines}
    if(~EnginesIn) {Engines = EnginesIn}
}
Engines = Engines | AlwaysOn | EnginesIn
EnginesEdge = changed(Engines) & Engines
#Resets Variables when off
if(EnginesEdge) {ZAdded =0, InternalZ =0, YAdjust =0, Forward =0, Throttle =0, ZThrottle =0, RThrottle =0, TopSpeed2 =0}
runOnTick(Engines | Driver)



if(tickClk() & Engines) {
    #Main calculations power switch

    #Freecam Mode
    if(Freecam)   {
        if(Shift) {
            Eye = Driver:eye()
            if(!FreeV) {FreeV = Prop:pos()}
            FreeV += Eye*FreeSpeed*sign(WS)
            X = FreeV:x(), Y = FreeV:y(), Z = FreeV:z()
        } 
        else{FreeV = vec()}
    }
    
    #Additional Z
    ZMax = fromUnit("km/h", ZTopSpeed)
    ZThrottle += 0.007 * sign(UpDown -ZThrottle/10) * (inrange(ZThrottle, -1, 1) + 4*(sign(UpDown) != sign(ZThrottle) & abs(ZThrottle) > 0.028)) * ZAcceleration
    ZAdded += ZThrottle * ZMax / 33
    
    #Pitch and Roll Calculations
    RThrottle += 0.007 * sign(-AD - RThrottle/10)   * (inrange(RThrottle, -1, 1) + RollRevertSpd*(sign(-AD) != sign(RThrottle) & abs(RThrottle) > 0.028))

    Pitch = Prop:angles():pitch()
    Roll = Prop:angles():roll()
    TarP = (Pitch + $Pitch*8)*AngFriction + (OrientationAbs==1 ? (RThrottle*RollLeaning) : (ZThrottle*PitchLeaning))*OrientationSign*45
    TarR = (Roll  + $Roll *8)*AngFriction + (OrientationAbs==1 ? (ZThrottle*PitchLeaning) : (-RThrottle*RollLeaning))*OrientationSign*45
    
    
    #Nautomaton overrides normal XYZ inputs
    if(Nautomaton) {
        TurnMode = 3, SmartZ = 12, XYZDistance = max(XYZDistance, 125), Engines = 1
        if(Prop:pos():distance(Owner:pos()) > XYZDistance) {Ownerpos = Owner:pos() + vec(0, 0, ZOffset), NautomatonPause = 0}
        elseif(!NautomatonPause) {Ownerpos = vec(Prop:pos():x(), Prop:pos():y(), Owner:pos():z() + ZOffset), NautomatonPause = 1}
        X = Ownerpos:x(), Y = Ownerpos:y(), Z = Ownerpos:z()
    }
    
    #SHARED THRUST:
    YFriction =  Prop:velL():y() / 10 * Friction
    XFriction = -Prop:velL():x() / 10 * Friction
    
    if(!Z) {
        #Friction Mode
    
        #Pseudo-Friction
        if(OrientationAbs == 2) {XSlow = XFriction * (sign(XFriction) != (WS* OrientationSign)), YSlow = YFriction}
        else                    {YSlow = YFriction * (sign(YFriction) != (WS*-OrientationSign)), XSlow = XFriction}
        
        TopSpeedEdge = changed(TopSpeed)
        #Forward Thrust
        if(TopSpeed > 0) {        "Practical"
            Throttle += 0.007 * RAcceleration * sign(WS -Throttle/10) * (inrange(Throttle, -1, 1) + 3*(sign(WS) != sign(Throttle) & abs(Throttle) > 0.021))
            Forward = (Speed - (clamp(TopSpeed * (1 + Mouse1), 0, 270) * Throttle)) * abs(WS)
        }
        elseif(TopSpeed < 0) { #  "Realistic"
            if(OrientationAbs == 2) {XSlow = 0} else{YSlow = 0}
            if(changed(WS)) {Throttle = Speed / -TopSpeed}
            Throttle += 0.007 * RAcceleration * sign(WS -Throttle/10) * (inrange(Throttle, -1, 1) + 2*(sign(WS) != sign(Throttle) & abs(Throttle) > 0.014))
            Forward = (Speed - (clamp(-TopSpeed * (1 + Mouse1), 0, 270) * Throttle)) * abs(WS)
        }
        else { #TopSpeed == 0     "Autopilot"
            if(TopSpeedEdge) {TopSpeed2 = round(Speed*2)/2}
            if(abs(TopSpeed2) < 10) {TopMul = 1} elseif(abs(TopSpeed2) < 50) {TopMul = 2} else{TopMul = 4}, TopMul *= RAcceleration
            if(changed(WS)) {if(WS == 1 & TopSpeed2<270) {TopSpeed2 += TopMul}
                elseif(WS == -1 & TopSpeed2>-270) {TopSpeed2 -= TopMul}}
            Forward = Speed - TopSpeed2
            if(changed(TopSpeed2)) {Chair:hintDriver("Current Engine Speed: " + toString(TopSpeed2), 2)}
        }
        #Orientation Patch
        FForward = -OrientationSign*Forward*(OrientationAbs==2)
        RForward = -OrientationSign*Forward*(OrientationAbs==1)
       
        #Z Handling
        if(!Gravity) {
            if(!InternalZ) {InternalZ = Prop:pos():z() + 35}
            if(SmartZ & !inrange(ZDiff, -SmartZ, SmartZ)) {ZAdded -= ZDiff - sign(ZDiff)*SmartZ}
            ZDiff = InternalZ - Prop:pos():z() + ZAdded
            ZForce = vec(0,0,(ZDiff*2 + $ZDiff * 10)*TotalMass)
        }
        elseif(Gravity == 1) {
            ZForce = vec()
        }
        else { #if(Gravity) {
            if(TrainGrav) {ZForce = Prop:up()*((TotalMass) * (600 * $Time) * Gravity/10)   }#+ (Prop:velL():z()*Friction/5)  <--- Might help
            else{ZForce = vec(0,0,TotalMass * (600 * $Time) * Gravity/10)   }
        }
        TurnMode = abs(TurnMode)
    }
    elseif(Z) {
        #XYZ tracking Mode
    
        PosZ = Prop:pos():z()
        if(changed(inrange(ZAdded, PosZ - 1000, PosZ + 1000))) {ZAdded = PosZ}
        if(Prop:pos():distance(vec(X,Y,Z)) > XYZDistance) {
            SubtractedV = clamp(vec(X - Prop:pos():x(), Y - Prop:pos():y(), Z - PosZ), -TopSpeed, TopSpeed)
            LocalX = SubtractedV:dot(Prop:forward())
            LocalY = SubtractedV:dot(Prop:right())
            if(SmartZ) {
                if(abs(Z - Prop:pos():z()) > SmartZ) {ZAdded += sign(Z - PosZ) * TopSpeed/6} #7.5 more precise, 6 more practical
            }else{ZAdded = Z + 10}
            XSlow = LocalX + $LocalX*10 + XFriction
            YSlow = LocalY + $LocalY*10 + YFriction        
            
        } else{XSlow = XFriction, YSlow = YFriction}
        ZDiff = clamp(-PosZ + ZAdded, -min(ZMax + Prop:vel():z(),0)*3, min(ZMax - Prop:vel():z(),0)*3 + 600/33)
        ZForce = vec(0,0,(ZDiff*2 + $ZDiff * 10)*Prop:mass())
        TurnMode = -abs(TurnMode) #So we can use our own Yaw
        if(Prop:pos():distance(Destination) > XYZDistance) {
            YAdjust = angnorm(Prop:angles():yaw() - (Prop:pos() - Destination):toAngle():yaw())
            TarY = clamp(($YAdjust * 10 + YAdjust) *TurnSpeed, -30, 30) + Prop:angVel():yaw()/(5*TurnSpeed)
        } else{TarY = Prop:angVel():yaw() * AngFriction}
    }
    
    #Yaw
    if(TurnMode == 1) { #Fixed-Speed based
        YThrottle += 0.007 * TurnAccel * sign(AD - YThrottle/10) * (inrange(YThrottle, -1, 1) + 3*(sign(AD) != sign(YThrottle) & abs(YThrottle) > 0.021))
        if(YThrottle) {TarY = Prop:angVel():yaw() - ( YThrottle*16*TurnSpeed * (1.2 + (abs(Speed) / max(abs(TopSpeed), TopSpeed2)))) }
        else{TarY = !AD * Prop:angVel():yaw() * AngFriction }
    }
    elseif(TurnMode == 2) { #Forced Yaw based
        if(EnginesEdge) {YForce = -Prop:angles():yaw()} #If we just turned on
        #YThrottle += 0.007 * TurnAccel * 4 * sign(AD - YThrottle/10) * (inrange(YThrottle, -1, 1) + 3*(sign(AD) != sign(YThrottle) & abs(YThrottle) > 0.021))
        
        YForce -= AD * TurnSpeed #* YThrottle
        YAdjust = angnorm(Prop:angles():yaw() + angnorm(YForce+180)-180)
        TarY = ($YAdjust * 10 + YAdjust) *TurnSpeed
    }
    elseif(TurnMode == 3) { #For Nautomaton Use
        YAdjust = angnorm(Prop:bearing(Ownerpos) + 5)
        TarY = ($YAdjust * 10 + YAdjust)
    }
    elseif(TurnMode == 4) { #Fixed-Speed based
        YAdjustSpeed = sign(AD - YTime/1000) * (inrange(YTime, -66, 66) + 3*(sign(AD) != sign(YTime) & abs(YTime) > 4))
        YTime += YAdjustSpeed * 0.7
        YThrottle = sign(YTime) * easeOutPower(abs(YTime), 66, TurnAccel)
        #YThrottle += 0.007 * TurnAccel * YAdjustSpeed
        #YThrottle = easeOutCubic(
        if(YThrottle) {TarY = Prop:angVel():yaw() - ( YThrottle*33*TurnSpeed * (1.2 + (abs(Speed) / max(abs(TopSpeed), TopSpeed2)))) }
        else{TarY = !AD * Prop:angVel():yaw() * AngFriction }
    }
    
    #Internal Thrusters
    if(InternalCombustion) {
        if(Prop:isVehicle()) {TarY = -TarY, QVar = XSlow, XSlow = YSlow, YSlow = -QVar, QVar = FForward, FForward = -RForward, RForward = QVar}
        
        Prop:applyForce(ZForce + Prop:mass()*((XSlow + FForward*16) * Prop:forward() + (YSlow + RForward*16) * Prop:right())) 
        #Up + (XFriction + Forward/Back) + (YFriction + Forward/Back)
        
        Radius = Prop:radius() * RadiusModifier Inert = Prop:inertia()/5 MassCenterL = Prop:massCenterL()
        ApplyP = TarP * Prop:up() * Inert:x()
        Prop:applyOffsetForce( ApplyP, MassCenterL + Prop:toWorld(vec( Radius,0,0)))
        Prop:applyOffsetForce(-ApplyP, MassCenterL + Prop:toWorld(vec(-Radius,0,0)))
        ApplyY = TarY * Prop:right() * Inert:z()/2
        Prop:applyOffsetForce( ApplyY, MassCenterL + Prop:toWorld(vec( Radius,-Radius,0)))
        Prop:applyOffsetForce(-ApplyY, MassCenterL + Prop:toWorld(vec(-Radius, Radius,0)))
        ApplyR = TarR * Prop:up() * Inert:x()
        Prop:applyOffsetForce( ApplyR, MassCenterL + Prop:toWorld(vec(0,-Radius,0)))
        Prop:applyOffsetForce(-ApplyR, MassCenterL + Prop:toWorld(vec(0, Radius,0)))
    } else {
        Inertia = Prop:inertia() / 5 /AngFriction
        PitchThrust = TarP * Inertia:y()
        RollThrust = TarR * Inertia:x()
        Rear = XSlow + FForward*16
        Right = YSlow + RForward*16
        Bottom = ZForce:z()
        FrontLeftSide = TarY * Inertia:z()
    }
}#Closes if(Engines) power switch
#ifdef fileReadArray(string)
elseif(clk("250")) {
    if(Jukebox) {
        timer("250", 250)
        #Jukebox Module
        if(changed(Shift) & Shift & Alt) {JukeboxOn = !JukeboxOn}
        if(JukeboxOn) {
            SongPitch = clamp(50, SongPitch + 100, 240)
            if(entity(gGetNum("Server")):type() == "gmod_wire_expression2") {
                Role = "Client"
                Song = gGetNum("Song")
                SongPitch = gGetNum("SongPitch")
            }
            else {
                Role = "Personal"
                if((Time > SongEndTime) | !Song | Song == 666) {
                    Song = randint(1, 44)
                }
            }
            if(changed(Song)) {
                Duration = SongDurations[Song,number]
                if(Song) {
                    soundStop("Song", 1.5)
                    Prop:soundPlay("Song", Duration + 2, SongList[Song,string])
                    SongEndTime = Time + Duration
                }
            }
            soundPitch("Song", SongPitch)
        }
        else {
            soundStop("Song", 1.5)
            Song = 0
        }
        #if(Role == "Personal" & changed(JukeboxOn)) {
        #    Song = randint(1, 44)
        #    Timer = 0
        #}
    }
}
#endif
elseif(clk("Rediscover Engines")) {
    #Finds Engine Entities, also other 'periodic' events
    timer("Rediscover Engines", 4000)

    if(PropIn) {Prop = PropIn}
    if(!Prop) {Prop = entity():isWeldedTo()}
    
    PList = Prop:getConstraints() if(!PHXProp) {PList:pushEntity(Prop)} #Don't mess with the PHXProp
    TotalMass = 0
    for(K=0, PList:count()) {Mass=PList[K, entity]:mass() if(Mass!=45678) {TotalMass += Mass}} #Props become 45678 when physgunned, breaking shit
    
    if(ChairIn) {Chair = ChairIn} 
    else{ 
       #Find us a driver's seat
        findIncludeClass("prop_vehicle_prisoner_pod")
        Find = findInSphere(Prop:toWorld(vec(0,0,25)), 150)
        if(Find) {Chair = findClosest(entity():pos())}
        #ifdef entity:setScale(vector)
            if(AutoChair == 2) {Chair:setScale(vec(0.16,0.16,0.16))}
        #endif
    }

    #Prevents lost ghosts when drivers accedentally get out
    if(NotSolid & !Chair:driver()) {
        setGhostState(0)
    }
}
elseif(duped()) {
    #Duping fix: Resets chip a short period after being duped, to fully initialize
    runOnTick(0)
    interval(0)
    Engines = 666
    exit()
}
elseif(Engines == 666) { # Basically dupeFinished()
    #ifdef entity:weld(entity)
    if(PHXProp) {PHXProp:propDelete() ranger(-5):entity():weld(entity())}
    #endif
    reset()
}
