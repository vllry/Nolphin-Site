@name Nolphin V4.95 Engine
@inputs ChairIn:entity PropIn:entity Destination:vector OnOff EnginesIn TopSpeedMod
@outputs ID Engines Speed TarY
@outputs Rear Right FrontLeftSide RollThrust PitchThrust Bottom
@persist Roll Yaw Pitch Engines [Prop Chair]:entity
@persist ZThrust ZDiff InternalZ ZThrottle ZAdded RThrottle YThrottle Throttle TopSpeed2 YForce YAdjust TotalMass
@persist Tick ChairSpawned Instructions:array PList:array PHXProp:entity Time Timer
@persist TurnMode TurnSpeed Friction AngFriction TopSpeed RAcceleration ZTopSpeed ZAcceleration TurnAccel
@persist ZOffset RollLeaning PitchLeaning RollRevertSpd SmartZ Freecam Gravity TrainGrav ZG2 Version:string
@persist AlwaysOn AutoDetect AutoChair RadiusModifier Orientation OrientationSign OrientationAbs InternalCombustion
if(first()) {       #Nebcorp Oscillating Levitations Processor and Highly Intellegent Nolphin
                    Version = "4.95 MarloKart Edition" #July 15th 2012##
                    ###<<< Configuration >>>###
#Settingname = Value #Range [Default Value], Description.

#1: "Fixed-Speed": GENERAL-Turn speed is based on forward thrust; scales well on most ships, feels most 'natural'. Recommended.
#2: "Forced-Yaw" : LARGESHIPS-Ship isn't spun due to external forces; always faces the last direction set. Better for huge ships, or for increased stability.
TurnMode        = 1 # 1 or 2   [1]
    TurnSpeed   = 3 #0.2 to 4 [1], for personal preference.
	   TurnAccel   = 1 # 0.2 to 4 [1]
Friction        = 1 # 0   to 5 [1], higher increases friction. Controls how quickly the ship comes to a stop.
    AngFriction = 1 # 0   to 5 [1], lower reduces angular power. Basically, how powerful the stabalizers are. (Lower/disable in ground-based vehicles like cars) [Default 1]
RadiusModifier  = 2 # 0.2 to 2 [1], higher values increase stability, but too high causes rediculously crazy convulsions.
Gravity         = 0 # -10 to 25 [0], 0: Hovercraft, -x: Extra upwards pressure (gliders, planes), +x: Extra downwards pressure (trains, tanks)
    TrainGrav   = 0 # [0] makes the 'gravity' push 'down relative to the nolphin' rather than relative to world
Orientation     = 1 # Alters which direction is "forward". 1:normal, -1:reversed, 2:facing right, -2:facing left

#TopSpeed
#1 - 180,    holding W increases the current speed, over 2 seconds, to TopSpeed (measured in KM/H).                More like racing games.
#-1 to -180,  pressing W applies bursts of speed, speed will very gradually decrease otherwise.                    More like a real car.
TopSpeed  =  50, RAcceleration = 1  # ^^^    [60] [1], Acceleration affects how quickly you reach top speed. Higher is sooner.
ZTopSpeed =  40, ZAcceleration = 1  #1 to 60 [40] [1], Vertical top speed, measured in KM/H, and the vertical acceleration multiplier.

RollLeaning  = 0.2, PitchLeaning = 0.2  #R: For turning; P: For going up/down. Both: 0 - 1.75 [1][1] Value indicates how far (45*Val) to lean.
    RollRevertSpd = 4 # 1 - 5    [3], how quickly the ship recovers from intentional (turning/banking) rolls. 
SmartZ       = 25 # [25] 0: hoverball behavior, snapping back to set Z. X>0: Resets targetZ if Nolphin is beyond that distance. 
 
#Modes
AlwaysOn    = 0# [0] Forces Nolphin on constantly (for debuggin, utility)
AutoChair   = 1 # [1] Automatically creates a chair, if none is found. 2 for Microchair

HaxBoard    = 2 # [2] lolololololol
InternalCombustion = 1 # [1] Leave 0 if you want to wire up your own thrusters


    ###<< End of Configuration >>     
 
#Prop:entity is wired to a source of entitydata about your ship, such as an Entity Marker

#if(first()) Stuff
timer("Rediscover Engines", 50)
Weld = entity():isWeldedTo()
if(HaxBoard > 2 | (HaxBoard & !PropIn & Weld & Weld:radius() < 45)) { #Thats too small! Make us a PHX
    entity():weldBreakAll()
    PHXProp = propSpawn("models/hunter/plates/plate"+HaxBoard+"x"+HaxBoard+".mdl", Weld:pos(), Weld:angles())
    WeldMass = Weld:mass()
    for(K=1, Weld:hasConstraints("Weld")) {PHXProp:weld2(Weld:isConstrainedTo("Weld", K)) WeldMass+=Weld:isConstrainedTo("Weld", K):mass()} #Weld the PHX to everything welded() was
    PHXProp:setMass(WeldMass *1.3), PHXProp:setNoDraw(1) PHXProp:setNotSolid(1) PHXProp:weld(entity()) PHXProp:weld2(Weld) Prop = PHXProp PHXProp:entTable():setValue("IsFakeNolphin", 1)
}elseif(Weld:entTable()["IsFakeNolphin",number] == 1) {PHXProp = Weld, Prop = Weld}

runOnChat(1)
TopSpeed = clamp(TopSpeed, -180, 180) #Shit goes bad at speeds over 180km/h; source limitation
OrientationSign = sign(Orientation) OrientationAbs = abs(Orientation)
timer("250", 1000)
}

#Duping fix: Resets chip a short period after being duped, to fully initialize
if(duped()) {runOnTick(0), interval(0), Engines = 666, exit()} 
if(Engines == 666) {if(PHXProp) {PHXProp:propDelete() ranger(-5):entity():weld(entity())}, reset()}

#Finds Engine Entities, also other 'periodic' events
if(clk("Rediscover Engines")) {
    print(ops())
    timer("Rediscover Engines", 4000)
    
    #if(Prop) {PropWeld = Prop} else{PropWeld = entity():isWeldedTo()}
    if(PropIn) {Prop = PropIn}
    if(ChairIn) {Chair = ChairIn}
    if(!Prop) {Prop = entity():isWeldedTo()}
    ID = Prop:id()
    
    PList = Prop:getConstraints() if(!PHXProp) {PList:pushEntity(Prop)} #Don't mess with the PHXProp
    TotalMass = 0
    for(K=0, PList:count()) {Mass=PList[K, entity]:mass() if(Mass!=45678) {TotalMass += Mass}} #Props become 45678 when physgunned, breaking shit
    
    if(ChairIn) {Chair = ChairIn} 
    else{ 
       #Find us a driver's seat
        findIncludeClass("prop_vehicle_prisoner_pod")
        Find = findInSphere(Prop:toWorld(vec(0,0,25)), 150)
        if(Find) {Chair = findClosest(entity():pos())}
        if(AutoChair == 2) {Chair:setScale(vec(0.16,0.16,0.16))}
    }
}
EnginesEdge = changed(Engines) & Engines

if(OrientationAbs == 2) {PRight = Prop:forward(), PForward = Prop:right(), Speed = toUnit("km/h", Prop:velL():x())}
else                      {PRight = Prop:right(), PForward =-Prop:forward(), Speed = toUnit("km/h",-Prop:velL():y())}
PRight *= OrientationSign, PForward *= OrientationSign, Speed *= OrientationSign

if(ChairSpawned<2 & (first() | clk("Rechair")) & AutoChair) {
    timer("Rechair", 100)
    ChairSpawned++
    if(Prop & (!Chair | AutoChair > 2)) {
        Chair = spawnTempVehicle("models/Nova/jeep_seat.mdl", entity():toWorld(vec(0,0,(AutoChair==2 ?0.5 :2))), PForward:toAngle() + ang(0, 0, 360  - PRight:toAngle():pitch()))
        Chair:weld(array(Prop)), Chair:setNoCollisions(1)
}   }

#Establishes Communications
Driver = Chair:driver()
if(changed(Driver)) {
    #Instructions System
    for(K=1, Instructions:count()) {if(Instructions[K, entity] == Driver) {IsPrevDriver = 1, break}}
    if(!IsPrevDriver) {
        Instructions:pushEntity(Driver)
        White = vec(200,200,200), Purple = vec(120,100,200)
        Driver:printColor(White, "    [Welcome to Nolphin version " + Version + "!]")
    }
}

if(Driver:inVehicle()) {
    #Key presses
    WS = Driver:keyW() - Driver:keyS(), AD = Driver:keyA() - Driver:keyD(), UpDown = Driver:keySpace() - Driver:keyR()
    Alt = Driver:keyAlt()
    Mouse1 = Driver:keyMouse1(), Mouse2 = Driver:keyMouse2()
    
    #Active Configuration (voice commands)
    if(chatClk(Driver)) {
        Said = lastSaid():explode(" "), Said1 = Said:string(1):lower(), Said2 = Said:string(2):toNumber(), SaidIt = Said:count() == 2
        if(Said:count() < 3) {
			         #hideChat(1)
            if    (Said1:find("gravity"))     {Gravity      = clamp((SaidIt?Said2 : Gravity),-50, 20),  Driver:hint("Gravity " + (SaidIt?"changed to " : "is ") +  Gravity, 3)}
            elseif(Said1 == "turnmode")        {TurnMode       = clamp((SaidIt?Said2 : TurnMode), 0, 2),    Driver:hint("TurnMode " + (SaidIt?"changed to " : "is ") +   TurnMode, 3), YForce = -Prop:angles():yaw()}
            elseif(Said1 == "turnspeed")      {TurnSpeed     = clamp((SaidIt?Said2 : TurnSpeed), 0, 5),    Driver:hint("TurnSpeed " + (SaidIt?"changed to " : "is ") + TurnSpeed, 3)}
            #elseif(Said1 == "topspeed")       {TopSpeed      = clamp((SaidIt?Said2 : TopSpeed),-180,180), Driver:hint("TopSpeed " + (SaidIt?"changed to " : "is ") +  TopSpeed, 3), TopSpeed2=0}
            elseif(Said1 == "ztopspeed")      {ZTopSpeed     = clamp((SaidIt?Said2 : ZTopSpeed), 0, 180),  Driver:hint("ZTopSpeed " + (SaidIt?"changed to " : "is ") + ZTopSpeed, 3)}
            elseif(Said1 == "friction")       {Friction      = clamp((SaidIt?Said2 : Friction), 0, 10),   Driver:hint("Friction " + (SaidIt?"changed to " : "is ") +  Friction, 3)}
            elseif(Said1 == "angfriction")    {AngFriction   = clamp((SaidIt?Said2 : AngFriction), 0, 10),   Driver:hint("AngFriction " + (SaidIt?"changed to " : "is ") + AngFriction, 3)}
            elseif(Said1 == "leaning")        {RollLeaning   = clamp((SaidIt?Said2 : RollLeaning), 0, 1.75), Driver:hint("Pitch & Roll leaning " + (SaidIt?"changed to " : "is ") + RollLeaning, 3), PitchLeaning = clamp((SaidIt?Said2 : PitchLeaning), 0, 1.75)}
            elseif(Said1 == "rollleaning")    {RollLeaning   = clamp((SaidIt?Said2 : RollLeaning), 0, 1.75), Driver:hint("RollLeaning " + (SaidIt?"changed to " : "is ") +   RollLeaning, 3)}
            elseif(Said1 == "pitchleaning")   {PitchLeaning  = clamp((SaidIt?Said2 : PitchLeaning), 0, 1.75), Driver:hint("PitchLeaning " + (SaidIt?"changed to " : "is ") +  PitchLeaning, 3)}
            elseif(Said1:find("radius"))      {RadiusModifier= clamp((SaidIt?Said2 : RadiusModifier), 0.05, 3), Driver:hint("RadiusModifier " + (SaidIt?"changed to " : "is ") + RadiusModifier, 3)}
            elseif(Said1:find("orient"))      {Orientation   = clamp((SaidIt?Said2 : Orientation),-2, 2),    Driver:hint("Orientation " + (SaidIt?"changed to " : "is ") +   Orientation, 3) OrientationSign = sign(Orientation) OrientationAbs = abs(Orientation)}
            elseif(Said1:find("accel")){RAcceleration = clamp((SaidIt?Said2 : RAcceleration), 0.1, 4),  Driver:hint("Acceleration " + (SaidIt?"changed to " : "is ") + RAcceleration, 3)}
        }
    }
    #Power toggle & Freezing Module
    if(changed(Mouse2) & Mouse2) {
        if(!Alt) {Engines = !Engines, Driver:hint("Power "+(Engines ? "On!" : "Off!"), 3)}
        else {
            UnFreeze = Prop:isFrozen(), Driver:hint("We're now "+(UnFreeze ? "Unfrozen!" : "Frozen!"),2)
            foreach(K,V:entity=PList) {V:freeze(!UnFreeze)}
        }   
    }
}
else{Driver = noentity()}
    
#Power settings
if(inputClk()) {
    if(~OnOff & OnOff) {Engines = !Engines}
    if(~EnginesIn) {Engines = EnginesIn}
}
Engines = Engines | AlwaysOn | EnginesIn
if(Engines | Driver) {runOnTick(1)} else{interval(500), runOnTick(0)}



#Main calculations power switch; nearly everything below this line is contained within this if() {
if(tickClk() & Engines) {
Time = curtime()

#Additional Z
ZMax = fromUnit("km/h", ZTopSpeed)
ZThrottle += 0.007 * ZAcceleration * sign(UpDown -ZThrottle/10) * (inrange(ZThrottle, -1, 1) + 4*(sign(UpDown) != sign(ZThrottle) & abs(ZThrottle) > 0.028))
ZAdded += ZThrottle * ZMax / 33

#Pitch and Roll Calculations
RThrottle += 0.007 * sign(-AD - RThrottle/10) * (inrange(RThrottle, -1, 1) + RollRevertSpd*(sign(-AD) != sign(RThrottle) & abs(RThrottle) > 0.028))

Pitch = Prop:angles():pitch(), Roll = Prop:angles():roll()
YFriction =  Prop:velL():y() / 10 * Friction
XFriction = -Prop:velL():x() / 10 * Friction

if(OrientationAbs == 1) {
    TarP = (Pitch + $Pitch*8)*AngFriction + RThrottle*RollLeaning*OrientationSign*45
    TarR = (Roll  + $Roll *8)*AngFriction + ZThrottle*PitchLeaning*OrientationSign*45
    YSlow = YFriction * (sign(YFriction) != (WS)*-OrientationSign), XSlow = XFriction
} else {
    TarP = (Pitch + $Pitch*8)*AngFriction + ZThrottle*PitchLeaning*OrientationSign*45
    TarR = (Roll  + $Roll *8)*AngFriction - RThrottle*RollLeaning*OrientationSign*45
    XSlow = XFriction * (sign(XFriction) != (WS)* OrientationSign), YSlow = YFriction
}

TopSpeedEdge = changed(TopSpeed)
#Forward Thrust
if(TopSpeed > 0) {        "Practical"
    Throttle += 0.007 * RAcceleration * sign(WS -Throttle/10) * (inrange(Throttle, -1, 1) + 3*(sign(WS) != sign(Throttle) & abs(Throttle) > 0.021))
    Forward = (Speed - (clamp(TopSpeed+TopSpeedMod, 0, 180) *Throttle))* abs(WS) }
elseif(TopSpeed < 0) { #  "Realistic"
    if(OrientationAbs == 2) {XSlow = 0} else{YSlow = 0}
    if(changed(WS)) {Throttle = Speed / (-TopSpeed+TopSpeedMod)}
    Throttle += 0.007 * RAcceleration * sign(WS - Throttle/10) * (inrange(Throttle, -1, 1) + 2*(sign(WS) != sign(Throttle) & abs(Throttle) > 0.014))
    Forward = (Speed - (clamp(-TopSpeed+TopSpeedMod, 0, 180) *Throttle))* abs(WS)}

#Orientation Patch
FForward = -OrientationSign*Forward*(OrientationAbs==2)
RForward = -OrientationSign*Forward*(OrientationAbs==1)

#Z Handling
if(Gravity) {
    if(TrainGrav) {ZForce = Prop:up()*((TotalMass) * (600 * $Time) * Gravity/10)   }
    else{ZForce = vec(0,0,TotalMass * (600 * $Time) * Gravity/10)   }}
else{
    if(!InternalZ) {InternalZ = Prop:pos():z() + 35}
    if(SmartZ & !inrange(ZDiff, -SmartZ, SmartZ)) {ZAdded -= ZDiff - sign(ZDiff)*SmartZ}
    ZDiff = InternalZ - Prop:pos():z() + ZAdded
    ZForce = vec(0,0,(ZDiff*2 + $ZDiff * 10)*TotalMass)
}

#Yaw
if(TurnMode == 1) { #Fixed-Speed based
    YThrottle += 0.007 * TurnAccel * sign(AD - YThrottle/10) * (inrange(YThrottle, -1, 1) + 3*(sign(AD) != sign(YThrottle) & abs(YThrottle) > 0.021))
    if(YThrottle) {TarY = Prop:angVel():yaw() - ( YThrottle*16*TurnSpeed * (1.3 + (abs(Speed) / max(abs(TopSpeed), TopSpeed2)))) }
    else{TarY = !AD * Prop:angVel():yaw() * AngFriction }}
elseif(TurnMode == 2) { #Forced Yaw based
    if(EnginesEdge) {YForce = -Prop:angles():yaw()} #If we just turned on
    YForce -= AD * TurnSpeed
    YAdjust = angnorm(Prop:angles():yaw() + angnorm(YForce+180)-180)
    TarY = ($YAdjust * 10 + YAdjust) *TurnSpeed
}

#Internal Thrusters
if(InternalCombustion) {
    if(Prop:isVehicle()) {TarY = -TarY, QVar = XSlow, XSlow = YSlow, YSlow = -QVar, QVar = FForward, FForward = -RForward, RForward = QVar}
    Prop:applyForce(ZForce + Prop:mass()*((XSlow + FForward*16) * Prop:forward() + (YSlow + RForward*16) * Prop:right())) 
    #Up + (XFriction + Forward/Back) + (YFriction + Forward/Back)
    
    Radius = Prop:radius() * RadiusModifier Inert = Prop:inertia()/5 MassCenterL = Prop:massCenterL()
    ApplyP = TarP * Prop:up() * Inert:x()
    Prop:applyOffsetForce(ApplyP, Prop:toWorld(vec(Radius,0,0))+MassCenterL)
    Prop:applyOffsetForce(-ApplyP, Prop:toWorld(vec(-Radius,0,0))+MassCenterL)
    ApplyY = TarY * Prop:right() * Inert:z()/2
    Prop:applyOffsetForce(ApplyY, Prop:toWorld(vec(Radius,-Radius,0))+MassCenterL)
    Prop:applyOffsetForce(-ApplyY, Prop:toWorld(vec(-Radius,Radius,0))+MassCenterL)
    ApplyR = TarR * Prop:up() * Inert:x()
    Prop:applyOffsetForce(ApplyR, Prop:toWorld(vec(0,-Radius,0))+MassCenterL)
    Prop:applyOffsetForce(-ApplyR, Prop:toWorld(vec(0,Radius,0))+MassCenterL)
}else{
    Inertia = Prop:inertia() / 5 /AngFriction
    PitchThrust = TarP * Inertia:y()
    RollThrust = TarR * Inertia:x()
    Rear = XSlow + FForward*16
    Right = YSlow + RForward*16
    Bottom = ZForce:z()
    FrontLeftSide = TarY * Inertia:z()
}
}#Closes if(Engines) power switch

#Resets Variables when off
if(EnginesEdge) {ZAdded =0, InternalZ =0, YAdjust =0, Forward =0, Throttle =0, ZThrottle =0, RThrottle =0, TopSpeed2 =0 Time = curtime()}
