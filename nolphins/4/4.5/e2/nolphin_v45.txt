@name Nolphin V4 Engine
@inputs Chair:entity Prop:entity Destination:vector NWire:wirelink
@inputs Prop2:entity Prop3:entity Prop4:entity Prop5:entity SongPitch NextSong
@inputs W A S D Up Down OnOff ForceOff ForceOn X Y Z TargetP TargetR 
@outputs ID On Speed W2 RThrottle PThrottle
@persist Roll Yaw Pitch PThrottle RThrottle P2 R2 Engines PropB:entity Driver:entity
@persist ZThrust ZDiff InternalZ ZThrottle ZAdded ZAimed Z2 Throttle TopSpeed2
@persist YForce YAdjust LocalX LocalY I HoldM2 HoldM1 HoldShift NotSolid HoldEngines FX FY FZ Yaw4
@persist W2 A2 S2 D2 Ownerpos:vector NautomatonPause Tick Instructions:array AlphaList:array
@persist Prop2ID Prop3ID Prop4ID Prop5ID Timer Song Duration HoldSong JukeboxOn
@persist SYawMode STurnSpeed STopSpeed SZGravity SFriction SAngFriction SLeaning SRadius
#Nebcorp Oscillating Levitations Processor and Highly Intellegent Nolphin
##Version 4.4##
#Most recent time I adjusted the date#
##May 31st##
 
###<< Configuration >>###
 
#Yaw (turning) Mode:
#1: "Friction based", for more realistic turning (if you are spun, the ship stabilizes at current Yaw)
#2: "Fixed Yaw", ideal for more controlled turning (if you are spun, the ship returns to your desired Yaw)
YawMode = 2 #<-- if HELP MY TURNING SUX is you, try 2
    TurnSpeed = 1  #0.2 - 4, The turning speed control multiplier.

#Speedz
TopSpeed  = 50 #2-180, in KM/H. Set to 0 for Manual Adjustments (mid-flight)
    RAcceleration = 1 #Acceleration multiplier for forward/back motions.
ZTopSpeed = 1  #0.2 - 3, The top speed going up/down.
    ZAcceleration = 1  #0.2 - 4, The speed of acceleration for going up/down.
Friction    = 6  #2 - 60, higher reduces effect. Controls how quickly the ship comes to a stop. Default 5
AngFriction = 1

#GPS/XYZ related
Nautomaton  = 0 #Makes the Nolphin follow you around like a pet :D
    ZOffset = 40
XYZDistance = 140 #Distance away from XYZ targets to stop at.
ZSpeed      = TopSpeed #2-180, in KM/H. Set to TopSpeed to mirror your XY speed.

#Custumizasionz
RollLeaning  = 0  #0 disables (Left/right leaning)
PitchLeaning = 0 #0 disables (Forward/backward leaning)
SmartZ       = 25 #1 resets targetZ if its too distant, 0 behaves like hoverballs, snapping back to set Z.  
Freecam      = 1 #Enables Goto-view mode while holding Shift
ZGravity     = 6 #0 Normal | 1-5: Z is off, Nolphin fakes low gravity (Cars? Hang-gliders?)
 
#Modes
StayOn      = 0 #Forces it on constantly (debuggin)
AutoDetect  = 1 #Uses whatever entity the chip is sitting on by default, as the base.
NAPCOn      = 1 #Auto detects any vehicle above the chip, and declares it the driver.
RagdollMode = 0 #KEEP OFF LOL
Jukebox     = 1
AutoChair   = 1
 
#Troubleshooting:
RadiusModifier = 1 #0.2 - 2. Normally, higher is more accurate. If stability is compromised OR for narrow ships, lower this. 
Orientation = 1 #Alters which direction is "forward". 1:normal, -1:reversed, 2:facing right, -2:facing left
 
###<< End of Configuration >>
 
#Prop:entity is wired to a source of entitydata about your ship, such as an Entity Marker
#To use XYZ-tracking mode, wire up your desired location to the XYZ inputs, and the Nolphin will swiftly fly there.
 
 
 
 
#Allows duping
if(duped()) {W2 = 666, interval(300), exit()}
if(W2 == 666) {reset()}

#Finds Engine Entities
if(AutoDetect & (first() | round(curtime(), 1)%10 == 0)) {
    PropB = entity():isWeldedTo()
    PropList = PropB:getWeldsWide(8)
    if(PropList:maxWeight() == PropB) {PropList:remove(PropList:maxWeightIndex())}
    if(PropList:maxWeight():mass() >= 100) {Prop2ID = PropList:maxWeight():id(), PropList:remove(PropList:maxWeightIndex())}
    if(PropList:maxWeight():mass() >= 100) {Prop3ID = PropList:maxWeight():id(), PropList:remove(PropList:maxWeightIndex())}
    if(PropList:maxWeight():mass() >= 100) {Prop4ID = PropList:maxWeight():id(), PropList:remove(PropList:maxWeightIndex())}
    if(PropList:maxWeight():mass() >= 100) {Prop5ID = PropList:maxWeight():id(), PropList:remove(PropList:maxWeightIndex())}
}
if(!Prop) {Prop = PropB}
if(!Prop2 & AutoDetect>1) {Prop2 = entity(Prop2ID)}, if(!Prop3 & AutoDetect>2) {Prop3 = entity(Prop3ID)}, if(!Prop4 & AutoDetect>3) {Prop4 = entity(Prop4ID)}, if(!Prop5 & AutoDetect>4) {Prop5 = entity(Prop5ID)}
if(Prop) {PList = Prop:getConstraints(), PList:pushEntity(Prop), ID = Prop:id()}, Tick = curtime()

#Establishes Communications
if(NAPCOn) {rangerFilter(Prop), NAPC = ranger(25):entity(), if(NAPC:isVehicle() & !Driver) {Driver = NAPC:driver()}
if(Chair) {Driver = Chair:driver()}, if(!Driver:inVehicle()) {Driver = noentity()}
    W = Driver:keyW(), A = Driver:keyA(), S = Driver:keyS(), D = Driver:keyD(), Up = Driver:keySpace(), Down = Driver:keyR()
    Shift = Driver:keyShift(), Alt = Driver:keyAlt(), Ctrl = Driver:keyCtrl()
    if(Driver:keyMouse2() & !HoldM2 & !Alt) {Engines = !Engines, Driver:hint("Power On!"*Engines + "Power Off!"*!Engines, 3)}}
if(Driver:inVehicle() & !(Driver:id() == Instructions:number(1) | Driver:id() == Instructions:number(2) | Driver:id() == Instructions:number(3) | Driver:id() == Instructions:number(4))) {Instructions:pushNumber(Driver:id())
    Driver:print("                   Welcome to Nolphin!"), Driver:print("Power: Mouse2                   Movement: WASD Space/R Mouse1"),Driver:print("Self-Freezing: Alt-Mouse2   Radio: Alt-Shift"),Driver:print("Ghosting: Alt-Mouse1          Emergency Fly: Shift")}
if(NWire) {W = NWire:number("W"), A = NWire:number("A"), S = NWire:number("S"), D = NWire:number("D")
Up = NWire:number("Space"), Down = NWire:number("R"), if(NWire:number("Mouse2")) {Engines = !Engines}}

#Active Configuration
Said = Driver:lastSaid():explode(" ")
if(Said:string(1):lower():find("gravity")) {SZGravity = Said:string(2):toNumber() + 1}, if(SZGravity) {ZGravity = SZGravity - 1}
if(Said:string(1):lower():find("yawmode")) {SYawMode = Said:string(2):toNumber() + 1}, if(SYawMode) {YawMode = SYawMode - 1}
if(Said:string(1):lower():find("turnspeed")) {STurnSpeed = Said:string(2):toNumber() + 1}, if(STurnSpeed) {TurnSpeed = STurnSpeed - 1}
if(Said:string(1):lower():find("topspeed")) {STopSpeed = Said:string(2):toNumber() + 1}, if(STopSpeed) {TopSpeed = STopSpeed - 1}
if(Said:string(1):lower():find("friction")) {SFriction = Said:string(2):toNumber() + 1}, if(SFriction) {Friction = SFriction - 1}
if(Said:string(1):lower():find("angfriction")) {SAngFriction = Said:string(2):toNumber() + 1}, if(SAngFriction) {AngFriction = SAngFriction - 1}
if(Said:string(1):lower():find("leaning")) {SLeaning = Said:string(2):toNumber() + 1}, if(SLeaning) {PitchSpeed = SLeaning - 1, RollSpeed = SLeaning - 1}
if(Said:string(1):lower():find("radius")) {SRadius = Said:string(2):toNumber() + 1}, if(SRadius) {RadiusModifier = SRadius - 1}

#Extra Modules
if(Driver:keyMouse1()) {TopSpeed = TopSpeed*2}
if(Alt & Driver:keyMouse2() & !HoldM2) {Freeze = Prop:isFrozen(), Driver:hint("We're Frozen!"*!Freeze + "We're Unfrozen!"*Freeze, 2)
    Prop:freeze(!Freeze), if(Prop2){Prop2:freeze(!Freeze)}, if(Prop3){Prop3:freeze(!Freeze)}, if(Prop4){Prop4:freeze(!Freeze)}, if(Prop5){Prop5:freeze(!Freeze)}}
if(Alt & Driver:keyMouse1() & !HoldM1) {NotSolid = !NotSolid, Driver:hint("We're Ghosted!"*NotSolid + "We're Unghosted!"*!NotSolid, 2)
    if(NotSolid) {PList:setNotSolid(1), AlphaList = PList:getAlphaArray(), PList:setAlpha(AlphaList:clone():addNumber(-100))} else{PList:setNotSolid(0), PList:setAlpha(AlphaList)}} HoldM1 = Driver:keyMouse1()
    if(!Driver) {NotSolid = 0, PList:setNotSolid(0), PList:setAlpha(AlphaList)}
if(Jukebox) {
    gShare(1), gSetGroup("Muzak")
    SongList = fileReadArray("jukeboxsongs"), SongDurations = fileReadArray("jukeboxdurations"), NumberOfSongs = SongList:count()
    SongPitch = clamp(50, SongPitch + 100, 240)
    if(entity(gGetNum("Server")):type() != "gmod_wire_expression2") {gSetNum("Server", entity():id())}
    if(gGetNum("Server") == entity():id()) {Timer += $Tick*(SongPitch/100)
        gSetNum("SongPitch", SongPitch)
        if((Duration < Timer) | (~NextSong & NextSong)) 
            {Song = randint(1, NumberOfSongs), Timer = 0}, gSetNum("Song", Song), Role = "Servering"}
    else{Song = gGetNum("Song"), Role = "Client"}, SongPitch = gGetNum("SongPitch")
    Duration = SongDurations:number(Song), SongPath = SongList:string(Song)
    if(Alt & Shift & !HoldShift) {JukeboxOn = !JukeboxOn}
    if(JukeboxOn & Song != HoldSong) {soundStop("Song", 1.5), Prop:soundPlay("Song", 0, SongPath)} 
    if(JukeboxOn) {HoldSong = Song, soundPitch("Song", SongPitch)} else{soundStop("Song", 1.5)}}, HoldShift = Driver:keyShift()
    
if(Destination) {K = Destination, X = K:x(), Y = K:y(), Z = K:z()}
if(Orientation == 2) {R3 = P2, P3 = -R2 PRight = -Prop:forward(), PForward = -Prop:right(), Speed = toUnit("km/h", -Prop:velL():x())}
elseif(Orientation == -2) {R3 = -P2, P3 = R2, PRight = Prop:forward(), PForward = Prop:right(), Speed = toUnit("km/h", Prop:velL():x())}   
elseif(Orientation == -1) {R3 = -R2, P3 = -P2, PRight = -Prop:right(), PForward = Prop:forward(), Speed = toUnit("km/h", Prop:velL():y())}  
else{PRight = Prop:right(), PForward = -Prop:forward(), R3 = R2, P3 = P2, Speed = toUnit("km/h", -Prop:velL():y())}
if(first() & AutoChair & !NAPC:isVehicle() &Prop & !Chair) {spawnTempVehicle("models/Nova/jeep_seat.mdl", entity():pos() + vec(0,0,2), PForward:toAngle() + ang(0, 0, 360 - PRight:toAngle():pitch())):weld(Prop)}

HoldM2 = Driver:keyMouse2()

#Power settings
if(~OnOff & OnOff) {Engines = !Engines}
if(ForceOff) {Engines = 0} 
if(ForceOn) {Engines = 1} elseif(~ForceOn & !ForceOn) {Engines = 0}
if(StayOn) {Engines = 1}
On = Engines
if(Engines | Driver) {runOnTick(1)} else{interval(250), runOnTick(0)}

#Forward Thrust
if(TopSpeed) { TopSpeed2=0
    For1 = (W-S)* 100
    if(Throttle > For1) {if(For1 == 0 | (For1 == -100 & (Throttle > 0))) {Throttle -= 2.1 *RAcceleration} else{Throttle -= 0.70 *RAcceleration}}
    elseif(For1 > Throttle) {if(For1 == 0 | (For1 == 100 & (Throttle < 0))) {Throttle += 2.1 *RAcceleration} else{Throttle += 0.70 *RAcceleration}}
    Forward = -(Speed - (TopSpeed *Throttle /100))* (W | S) }
else{if(Engines & !HoldEngines) {TopSpeed2 = round(Speed*2)/2}
    if(!W2 & W & TopSpeed2<180) {TopSpeed2 += 2}, if(!S2 & S & TopSpeed2>-180) {TopSpeed2 -= 2}
    Forward = -(Speed - TopSpeed2)
    if((!S2 & S) | (!W2 & W)) {Driver:hint("Current Engine Speed: " + toString(TopSpeed2), 2)}
    S2 = S, W2 = W}

#Additional Z
Z3 = ZTopSpeed *100
Z1=(Up-Down)* Z3
if(Z2 > Z1) {if(Z1 == 0 | (Z1 == -Z3 & (Z2 > 0))) {Z2 -= 0.84 * ZAcceleration} else{Z2 -= 0.28 * ZAcceleration}}
elseif(Z1 > Z2) {if(Z1 == 0 | (Z1 == Z3 & (Z2 < 0))) {Z2 += 0.84 * ZAcceleration} else{Z2 += 0.28 * ZAcceleration}}
if(round(Z2 / 5) == 0) {ZThrottle = 0} else{ZThrottle = Z2 / 5}
ZAdded += ZThrottle

R2 = clamp(ZThrottle, -15, 15)*3*RollLeaning
if(PitchLeaning) {
    P1 = (D-A) *60
    if((P2 < P1) & (P2 > P1 + 1)) {P2 = 0} #Filters out petty decimals like 0.31
    elseif(P2 > P1) {if(P1==0 | (A & (P2 > 0))) {P2 -= 0.9} else{P2 -= 0.3}} 
    elseif(P1 > P2) {if(P1==0 | (D & (P2 < 0))) {P2 += 0.9} else{P2 += 0.3}}
}

Pitch = Prop:angles():pitch() - TargetP
Roll = Prop:angles():roll() - TargetR
if(Orientation == 2) {TarP = ($Pitch*8+Pitch) - R2, TarR = ($Roll*8+Roll) + P2}
elseif(Orientation == -2) {TarP = ($Pitch*8+Pitch) + R2, TarR = ($Roll*8+Roll) - P2}
elseif(Orientation == -1) {TarP = ($Pitch*8+Pitch) - P2, TarR = ($Roll*8+Roll) - R2}
else{TarP = ($Pitch*8+Pitch) + P2, TarR = ($Roll*8+Roll) + R2}

#Freecam Mode
if(Shift & Freecam)   {
Eye = Driver:eye(), Eye2 = (-Eye + Prop:up()):normalized(), FreeSpeed = 10
if(!FX) {FX = Prop:pos():x(), FY = Prop:pos():y(), FZ = Prop:pos():z()}
if(W) {FX += (Eye:x() * FreeSpeed), FY += Eye:y() * FreeSpeed, FZ += Eye:z() * FreeSpeed}
if(S) {FX -= (Eye:x() * FreeSpeed), FY -= Eye:y() * FreeSpeed, FZ -= Eye:z() * FreeSpeed}
X = FX, Y = FY, Z = FZ, ZGravity = 0 } 
elseif(!Shift) {FX = 0, FY = 0, FZ = 0}

#Nautomaton overrides normal XYZ inputs
if(Nautomaton) {
    YawMode = 1, SmartZ = 12, XYZDistance = max(XYZDistance, 125), Engines = 1
    if(Prop:pos():distance(owner():pos()) > XYZDistance) {Ownerpos = owner():pos() + vec(0, 0, ZOffset), NautomatonPause = 0}
    elseif(!NautomatonPause) {Ownerpos = vec(Prop:pos():x(), Prop:pos():y(), owner():pos():z() + ZOffset), NautomatonPause = 1}
    X = Ownerpos:x(), Y = Ownerpos:y(), Z = Ownerpos:z()
}
    
#MAIN THRUST: XYZ tracking Mode
if(Z) { 
    if(!ZAimed) {ZAimed = Prop:pos():z()}
    SubtractedV = clamp(vec(X - Prop:pos():x(), Y - Prop:pos():y(), Z - Prop:pos():z()), -TopSpeed*2, TopSpeed*2)
    LocalX = SubtractedV:dot(Prop:forward())
    LocalY = SubtractedV:dot(Prop:right())
    LocalZ = SubtractedV:dot(Prop:up())
    XSlow = (-($LocalX*10 + LocalX) + (Prop:velL():x() /Friction)) /2
    YSlow = ( ($LocalY*10 + LocalY) + (Prop:velL():y() /Friction)) /2  
    if(abs(Z - Prop:pos():z()) > SmartZ) {ZAimed += sign(Z - Prop:pos():z()) * ZSpeed/6} #7.5 more precise, 6 more practical
    if(SmartZ) {if(ZDiff > SmartZ) {ZAimed -= (ZDiff-SmartZ)} elseif(ZDiff < -SmartZ) {ZAimed -= (ZDiff+SmartZ)}}
    ZDiff = -Prop:pos():z() + ZAimed
    ZThrust =  $ZDiff*10 + ZDiff 
}

if(!InternalZ) {InternalZ = Prop:pos():z() + 35}
if(ZGravity) {InternalZ = Prop:pos():z() + 6 - ZGravity, ZAdded = 0, Z = 0}

#MAIN THRUST: Friction Mode
if(!Z) { 
YFriction = Prop:velL():y() / Friction
XFriction = Prop:velL():x() / Friction
if(Orientation==-2)    {YSlow=YFriction, if(XFriction<0 & !S) {XSlow=XFriction} elseif(XFriction>0 & !W) {XSlow=XFriction} else{XSlow=0}}
elseif(Orientation==2) {YSlow=YFriction, if(XFriction<0 & !W) {XSlow=XFriction} elseif(XFriction>0 & !S) {XSlow=XFriction} else{XSlow=0}}
elseif(Orientation==-1){XSlow=XFriction, if(YFriction<0 & !S) {YSlow=YFriction} elseif(YFriction>0 & !W) {YSlow=YFriction} else{YSlow=0}}
else                   {XSlow=XFriction, if(YFriction<0 & !W) {YSlow=YFriction} elseif(YFriction>0 & !S) {YSlow=YFriction} else{YSlow=0}}
Primary = 40 * Forward  
if(SmartZ) {if(ZDiff > SmartZ) {ZAdded -= (ZDiff-SmartZ)} elseif(ZDiff < -SmartZ) {ZAdded -= (ZDiff+SmartZ)}}
ZDiff = InternalZ - Prop:pos():z() + ZAdded
ZThrust = ZDiff + $ZDiff * 5
}

#Yaw
if(YawMode == 1) { #Friction based
TarY = (D - A)* (0.8 + abs(Prop:velL():x()) /Friction /200)*TurnSpeed + ((!A & !D) * Prop:angVel():yaw() / Friction) }
elseif(YawMode == 2) { #Forced Yaw based
if(!Engines) {YForce = -Prop:angles():yaw()}
YForce += (D - A)* 1.4 * TurnSpeed
if(YForce < -179) {YForce = 179}
if(YForce > 179) {YForce = -179}
YAdjust = angnorm(Prop:angles():yaw() + YForce)
TarY = ($YAdjust * 10 + YAdjust) *TurnSpeed}
elseif(YawMode == 3) { #For Nautomaton Use
YAdjust = angnorm(Prop:bearing(Ownerpos) + 5)
TarY = ($YAdjust * 10 + YAdjust)}
else{TarY = (D - A) * TurnSpeed} #Default to basic

#Resets Variables when off
if(!Engines) {ZAdded =0, InternalZ =0, Z2 =0, Throttle =0, YAdjust =0, Forward =0, ZThrottle =0, TopSpeed2 = 0}

#Internal Thrusters
if(Engines) {
Weight = Prop:mass() * 0.8
Radius = Prop:radius() * RadiusModifier
CMass = Prop:massCenterL()
if(Prop:type() == "prop_ragdoll") {Radius = 100, Weight = 100}

Prop:applyForce(vec(0,0,ZThrust) *Weight*4) #Primary Z
Prop:applyForce(PRight * Primary *Weight/2) #Primary Forward/Back Movement
Prop:applyForce(Prop:forward()* -XSlow * Weight/2) #X Friction
Prop:applyForce(Prop:right()  *  YSlow * Weight/2) #Y Friction

Prop:applyOffsetForce( TarR *Prop:up() *Prop:inertia():x()/5 /AngFriction, Prop:toWorld(vec(0,-Radius,0)) + CMass)
Prop:applyOffsetForce(-TarR *Prop:up() *Prop:inertia():x()/5 /AngFriction, Prop:toWorld(vec(0, Radius,0)) + CMass)
Prop:applyOffsetForce( TarP *Prop:up() *Prop:inertia():y()/5 /AngFriction, Prop:toWorld(vec( Radius,0,0)) + CMass)
Prop:applyOffsetForce(-TarP *Prop:up() *Prop:inertia():y()/5 /AngFriction, Prop:toWorld(vec(-Radius,0,0)) + CMass)
Prop:applyOffsetForce( TarY *Prop:right() *Prop:inertia():z()/10, Prop:toWorld(vec( Radius,-Radius,0)) + CMass)
Prop:applyOffsetForce(-TarY *Prop:right() *Prop:inertia():z()/10, Prop:toWorld(vec(-Radius, Radius,0)) + CMass)

#Extra Props for thrust
if(Prop2) {
Weight2 = Prop2:mass() * 0.8
Radius2 = Prop2:radius() * RadiusModifier   
CMass2 = Prop2:massCenterL()
Prop2:applyForce(vec(0,0,ZThrust) *Weight2*4) #Primary Z
Prop2:applyForce(PRight * Primary *Weight2/2) #Primary Forward/Back Movement
Prop2:applyForce(Prop2:forward()* -XSlow * Weight2/2)
Prop2:applyForce(Prop2:right()  *  YSlow * Weight2/2)
Prop2:applyOffsetForce( TarR *Prop2:up() *Prop2:inertia():x()/5, Prop2:toWorld(vec(0,-Radius2,0)) + CMass2)
Prop2:applyOffsetForce(-TarR *Prop2:up() *Prop2:inertia():x()/5, Prop2:toWorld(vec(0, Radius2,0)) + CMass2)
Prop2:applyOffsetForce( TarP *Prop2:up() *Prop2:inertia():y()/5, Prop2:toWorld(vec( Radius2,0,0)) + CMass2)
Prop2:applyOffsetForce(-TarP *Prop2:up() *Prop2:inertia():y()/5, Prop2:toWorld(vec(-Radius2,0,0)) + CMass2)
Prop2:applyOffsetForce( TarY *Prop2:right() *Prop2:inertia():z()/10, Prop2:toWorld(vec( Radius2,-Radius2,0)) + CMass2)
Prop2:applyOffsetForce(-TarY *Prop2:right() *Prop2:inertia():z()/10, Prop2:toWorld(vec(-Radius2, Radius2,0)) + CMass2)
} if(Prop3) {
Weight3 = Prop3:mass() * 0.8
Radius3 = Prop3:radius() * RadiusModifier
CMass3 = Prop3:massCenterL()
Prop3:applyForce(vec(0,0,ZThrust) *Weight3*4) #Primary Z
Prop3:applyForce(PRight * Primary *Weight3/2) #Primary Forward/Back Movement
Prop3:applyForce(Prop3:forward()* -XSlow * Weight3/2)
Prop3:applyForce(Prop3:right()  *  YSlow * Weight3/2)
Prop3:applyOffsetForce( TarR *Prop3:up() *Prop3:inertia():x()/5, Prop3:toWorld(vec(0,-Radius3,0)) + CMass3)
Prop3:applyOffsetForce(-TarR *Prop3:up() *Prop3:inertia():x()/5, Prop3:toWorld(vec(0, Radius3,0)) + CMass3)
Prop3:applyOffsetForce( TarP *Prop3:up() *Prop3:inertia():y()/5, Prop3:toWorld(vec( Radius3,0,0)) + CMass3)
Prop3:applyOffsetForce(-TarP *Prop3:up() *Prop3:inertia():y()/5, Prop3:toWorld(vec(-Radius3,0,0)) + CMass3)
Prop3:applyOffsetForce( TarY *Prop3:right() *Prop3:inertia():z()/10, Prop3:toWorld(vec( Radius3,-Radius3,0)) + CMass3)
Prop3:applyOffsetForce(-TarY *Prop3:right() *Prop3:inertia():z()/10, Prop3:toWorld(vec(-Radius3, Radius3,0)) + CMass3)
} if(Prop4) {
Weight4 = Prop4:mass() * 0.8
Radius4 = Prop4:radius() * RadiusModifier
CMass4 = Prop4:massCenterL()
Prop4:applyForce(vec(0,0,ZThrust) *Weight4*4) #Primary Z
Prop4:applyForce(PRight * Primary *Weight4/2) #Primary Forward/Back Movement
Prop4:applyForce(Prop4:forward()* -XSlow * Weight4/2)
Prop4:applyForce(Prop4:right()  *  YSlow * Weight4/2)
Prop4:applyOffsetForce( TarR *Prop4:up() *Prop4:inertia():x()/5, Prop4:toWorld(vec(0,-Radius4,0)) + CMass4)
Prop4:applyOffsetForce(-TarR *Prop4:up() *Prop4:inertia():x()/5, Prop4:toWorld(vec(0, Radius4,0)) + CMass4)
Prop4:applyOffsetForce( TarP *Prop4:up() *Prop4:inertia():y()/5, Prop4:toWorld(vec( Radius4,0,0)) + CMass4)
Prop4:applyOffsetForce(-TarP *Prop4:up() *Prop4:inertia():y()/5, Prop4:toWorld(vec(-Radius4,0,0)) + CMass4)
Prop4:applyOffsetForce( TarY *Prop4:right() *Prop4:inertia():z()/10, Prop4:toWorld(vec( Radius4,-Radius4,0)) + CMass4)
Prop4:applyOffsetForce(-TarY *Prop4:right() *Prop4:inertia():z()/10, Prop4:toWorld(vec(-Radius4, Radius4,0)) + CMass4)
} if(Prop5) {
Weight5 = Prop5:mass() * 0.8
Radius5 = Prop5:radius() * RadiusModifier
CMass5 = Prop5:massCenterL()
Prop5:applyForce(vec(0,0,ZThrust) *Weight5*4) #Primary Z
Prop5:applyForce(PRight * Primary *Weight5/2) #Primary Forward/Back Movement
Prop5:applyForce(Prop5:forward()* -XSlow * Weight5/2)
Prop5:applyForce(Prop5:right()  *  YSlow * Weight5/2)
Prop5:applyOffsetForce( TarR *Prop5:up() *Prop5:inertia():x()/5, Prop5:toWorld(vec(0,-Radius5,0)) + CMass5)
Prop5:applyOffsetForce(-TarR *Prop5:up() *Prop5:inertia():x()/5, Prop5:toWorld(vec(0, Radius5,0)) + CMass5)
Prop5:applyOffsetForce( TarP *Prop5:up() *Prop5:inertia():y()/5, Prop5:toWorld(vec( Radius5,0,0)) + CMass5)
Prop5:applyOffsetForce(-TarP *Prop5:up() *Prop5:inertia():y()/5, Prop5:toWorld(vec(-Radius5,0,0)) + CMass5)
Prop5:applyOffsetForce( TarY *Prop5:right() *Prop5:inertia():z()/10, Prop5:toWorld(vec( Radius5,-Radius5,0)) + CMass5)
Prop5:applyOffsetForce(-TarY *Prop5:right() *Prop5:inertia():z()/10, Prop5:toWorld(vec(-Radius5, Radius5,0)) + CMass5)
}}

#Deltafix


HoldEngines = Engines
